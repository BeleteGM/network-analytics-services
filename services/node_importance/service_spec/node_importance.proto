syntax = "proto3";


message Edge {
    repeated string edge = 1;
}



message Graph {

    repeated string nodes = 1;
    repeated Edge edges = 2;
    repeated double weights = 3;

}


message OutputNodesList {
    repeated string output_nodes = 1;
}


// find_central_nodes

message CentralNodeRequest {
    Graph graph = 1;
    bool usebounds = 3;
    bool directed = 4;

}

message CentralNodeResponse {
    bool status = 1;
    string message = 2;
    OutputNodesList output = 3;

}

// find_eccentricity

message PeripheryRequest {
    Graph graph = 1;
    string v = 2;
    string sp = 3;
    bool directed = 4;


}

message PeripheryResponse {
    bool status = 1;
    string message = 2;
    OutputNodesList output = 3;

}

// find_degree_centrality

message DegreeCentralityRequest {
    Graph graph = 1;
    bool directed = 2;
}

message DegreeCentralityResponse {
    bool status = 1;
    string message = 2;
    string output = 3;

}

// find_closeness_centrality

message ClosenessCentralityRequest {
    Graph graph = 1;
    string nodes = 2;
    bool normalized = 3;
    bool directed = 4;
}


message ClosenessCentralityResponse {
    bool status = 1;
    string message = 2;
    string output = 3;
}

// find_betweenness_centrality

message BetweennessCentralityRequest {
    Graph graph = 1;
    double k = 2;
    bool normalized = 3;
    bool weight = 4;
    bool endpoints = 5;
    double seed = 6;
    bool directed = 7;

}

message BetweennessCentralityResponse {
    bool status = 1;
    string message = 2;
    string output = 3;
}

// find_pagerank

message PageRankRequest {
    Graph graph = 1;
    double alpha = 2;
    double personalization = 3;
    double max_iter = 4;
    double tol = 5;
    string nstart = 6;
    string weight = 7;
    string dangling = 8;
    bool directed = 9;
}


message PageRankResponse {
    bool status = 1;
    string message = 2;
    string output = 3;
}

//find_eigenvector_centrality

message EigenvectorCentralityRequest {
    Graph graph = 1;
    double max_iter = 2;
    double tol = 3;
    string nstart = 4;
    string weight = 5;
    bool directed = 6;

}


message EigenvectorCentralityResponse {
    bool status = 1;
    string message = 2;
    string output = 3;
}

// find_hub_matrix
message HubMatrixRequest {
    Graph graph = 1;
    string nodelist = 2;
    bool directed = 3;

}

message HubMatrixResponse {
    bool status = 1;
    string message = 2;
    string output = 3;
}

//find_authority_matrix

message AuthorityMatrixRequest {
    Graph graph = 1;
    string nodelist = 2;
    bool directed = 3;

}


message AuthorityMatrixResponse {
    bool status = 1;
    string message = 2;
    string output = 3;
}


service NodeImportance {
    rpc CentralNodes (CentralNodeRequest) returns (CentralNodeResponse) {
    };
    rpc Periphery (PeripheryRequest) returns (PeripheryResponse) {
    };
    rpc DegreeCentrality (DegreeCentralityRequest) returns (DegreeCentralityResponse) {
    };
    rpc BetweennessCentrality (BetweennessCentralityRequest) returns (BetweennessCentralityResponse) {
    };
    rpc PageRank (PageRankRequest) returns (PageRankResponse) {
    };
    rpc EigenvectorCentrality (EigenvectorCentralityRequest) returns (EigenvectorCentralityResponse) {
    };
    rpc HubMatrix (HubMatrixRequest) returns (HubMatrixResponse) {
    };
    rpc AuthorityMatrix (AuthorityMatrixRequest) returns (AuthorityMatrixResponse) {
    };
    rpc ClosenessCentrality (ClosenessCentralityRequest) returns (ClosenessCentralityResponse) {
    };
}


