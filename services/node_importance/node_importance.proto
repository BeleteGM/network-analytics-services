syntax = "proto3";


message Edge{
    repeated string edge = 1;
}

message Graph{

    repeated string nodes = 2;
    repeated Edge edges = 3;
    repeated double weights = 4;

}

// find_central_nodes

message CentralNodeInput{
	Graph graph = 5;
	string e = 9;
	bool usebounds = 10;
	bool directed = 11;

}

message CentralNodeOutput{
	bool status = 6;
	string messgae = 7;
	string output = 8;

}


// find_eccentricity

message EccentricityInput {
	Graph graph = 5;
	string v = 6;
	string sp = 7;
	bool directed = 8;


}

message EccentricityOutput {
	bool status = 6;
	string messgae = 7;
	string output = 8;
	
}



// find_degree_centrality

message DegreeCentralityInput {
	Graph graph = 5;
	bool directed = 6;
}

message DegreeCentralityOutput {
	bool status = 6;
	string messgae = 7;
	string output = 8;
	
}


// find_closeness_centrality

message ClosenessCentralityInput {
	Graph graph = 5;
	string nodes = 6;
	bool normalized = 7;
	bool directed = 8;
}


message ClosenessCentralityOutput {
	bool status = 9;
	string messgae = 10;
	string output = 11;
}

// find_betweenness_centrality

message BetweennessCentralityInput {
	Graph graph = 5;
	double k = 6;
	bool normalized = 7;
	bool weight = 8;
	bool endpoints = 9;
	double seed = 10;
	bool directed = 11;

}

message BetweennessCentralityOutput {
	bool status = 6;
	string messgae = 7;
	string output = 8;
}


// find_pagerank

message PageRankInput{
	Graph graph = 5;
	double alpha = 6;
	double personalization = 7;
	double max_iter = 8;
	double tol = 9;
	string nstart =10 ; 
	string weight = 11;
	string dangling = 12;
	bool directed = 13 ;
}


message PageRankOutput{
	bool status = 6;
	string messgae = 7;
	string output = 8;	
}


//find_eigenvector_centrality

message EigenvectorCentralityInput {
	Graph graph = 5;
	double max_iter = 6;
	double tol = 7;
	string nstart = 8;
	string weight = 9;
	bool directed = 10;

}


message EigenvectorCentralityOutput {
	bool status = 6;
	string messgae = 7;
	string output = 8;	
}

// find_hub_matrix
message HubMatrixInput {
	Graph graph = 5;
	string nodelist = 6;
	bool directed = 7;
	
}

message HubMatrixOutput {
	bool status = 6;
	string messgae = 7;
	string output = 8;
}



//find_authority_matrix

message AuthorityMatrixInput {
	Graph graph = 5;
	string nodelist = 6;
	bool directed = 7;

}


message AuthorityMatrixOutput {
	bool status = 6;
	string messgae = 7;
	string output = 8;
}



service NodeImportance { 
	rpc CentralNodes (CentralNodeInput) returns (CentralNodeOutput) {};
	rpc Eccentricity (EccentricityInput) returns (EccentricityOutput) {};
	rpc DegreeCentrality (DegreeCentralityInput) returns (DegreeCentralityOutput) {};
	rpc BetweennessCentrality (BetweennessCentralityInput) returns (BetweennessCentralityOutput) {};
	rpc PageRank (PageRankInput) returns (PageRankOutput) {};
	rpc EigenvectorCentrality (EigenvectorCentralityInput) returns (EigenvectorCentralityOutput) {};
	rpc HubMatrix (HubMatrixInput) returns (HubMatrixOutput) {};
	rpc AuthorityMatrix (AuthorityMatrixInput) returns (AuthorityMatrixOutput) {};
	rpc ClosenessCentrality (ClosenessCentralityInput) returns (ClosenessCentralityOutput) {};
}


